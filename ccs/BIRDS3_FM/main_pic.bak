///////////////////////////////////////////////////////////////////////////////
//
//FM VERSION 1
//2018_12_03
//Yuta KAKIMOTO
//
///////////////////////////////////////////////////////////////////////////////

#include <main pic1.h>
//#include <mainpic_testing.c>
#int_timer1
void intval()
{   
   static int32 counter = 0;
   counter++;
   if (counter > 61)
   {
      counter = 0;
//!      nowtime++;
//!      
//!      if(nowtime > 0)
//!      {
         //fprintf(PC,"%ld",nowtime);
         FAB_FLAG++;
         RESERVE_SEC_FLAG++;
         currenttime++;
         //fprintf(PC,"Done\r\n");
//!      }
      if(RESERVE_SEC_FLAG > 59)
      {
         RESERVE_SEC_FLAG = 0;
         RESERVE_MIN_FLAG++;
      }
   }
}

#INT_rda//PC Interrupt
void UART1_RXD(void)
{
   CMD_FROM_PC[PC_DATA] = fgetc(PC);
   PC_DATA = ((PC_DATA + 1) % 3);
   //fputc(fgetc(PC),PC);
}

#INT_rda2 HIGH //COM Interrupt
void UART2_RXD(void)
{
   //SerialDataReceive();  //get 32 byte
   //COM_ONEBYTE_COMMAND = fgetc(COM);
   in_bffr_main[COM_DATA] = fgetc(COM);
   COM_DATA = ((COM_DATA + 1) % 16);
} 

#INT_rda3 //FAB Interrupt
void UART3_RXD(void)
{
   //collect_HK_from_FAB();
   in_HK[FAB_DATA] = fgetc(FAB);
   FAB_DATA = ((FAB_DATA + 1) % FAB_SENSOR_size);
} 

#INT_rda4
void UART4_RXD(void)
{
   
   reset_bffr[RESET_DATA] = fgetc(reset);
   RESET_DATA = ((RESET_DATA + 1) % RESET_size);
   
   if(reset_bffr[0] == 0xaa)//get ready for reset satellite
   {
      reset_flag = 1;
      RESET_DATA = 0;
   }
   
} 

void settings()
{
//!      SUBSECTOR_4KB_ERASE_OF(0);
//!      SUBSECTOR_4KB_ERASE_SCF(0);
//!      SUBSECTOR_4KB_ERASE_SMF(0);
   READ_WRTITING_ADDRESS_LOCATION();
   RESERVE_CHECK = 0;
   RESET_DATA = 0;
   fprintf(PC,"\r\nADD INFO ADDRESS:%lx\r\n",ADD_INFO_ADDRESS);
   
   CHECK_ADDRESS_DATA();
   CHECK_FLAG_INFO();
   
   
   set_tris_b(0b11010000);
   enable_interrupts(global);
   enable_interrupts(INT_rda);   // Main to PC
   enable_interrupts(INT_rda2);  // Main to COM PIC
   //enable_interrupts(INT_rda3);  // Main to FAB PIC
   enable_interrupts(INT_rda4);  // Main to RESET PIC
   //enable_interrupts(INT_TIMER0);
   
   setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256 | RTCC_8_BIT);
   set_timer0(0);
   
   BC_SETUP();
   
   Turn_OFF_CAM();
   //Turn_ON_CAM();
   Turn_OFF_ADCS();
   Turn_OFF_DC();
   //Turn_ON_DC();
   Turn_OFF_BC();

   fprintf(PC,"\r\n");
   CURRENT_FLAG_STATUS();
   fprintf(PC,"\r\n");
   CURRENT_ADDRESS_OF_FLASH();
   CHANGE_ADDRESS_WRITING_LOCATION();
   
   output_high(PIN_C4); //MUX: COM (MAIN-COM)
   output_low(PIN_A5); //MUX: CAM (MAIN-MISSION)
   
   Get_RSV();//read the reservation table info from flash memory
   SAVE_SAT_LOG(0x25,0x25,0x25);//reset log
   return;  
}

///////////TEST PART//////////////////////////
//#org DEFAULT 
void main()
{
   //MEMORY_ERASE();
   settings();
   enable_interrupts(INT_TIMER0);
   fprintf(PC,"Start Operating\r\n");
   TAKE_FLAG_INFO_FROM_OF();
   FAB_TEST_OPERATION();

   STORE_ADRESS_DATA_TO_FLASH();
   CURRENT_ADDRESS_OF_FLASH();
   STORE_FLAG_INFO();
   
   fprintf(PC,"CW:");
   for(int i = 0; i < 4; i++)
   {
      fprintf(PC,"%x,",CW_FORMAT[i]);
   }
   fprintf(PC,"%x\r\n",CW_FORMAT[4]);
   
   
   fprintf(PC,"%d\r\n",BC_ATTEMPT_FLAG);
   
   if(BC_ATTEMPT_FLAG < 4 && BC_ATTEMPT_FLAG != 0)
   {
      fprintf(PC,"send command to RESET PIC\r\n");
      for(int num = 0; num < 10; num++)
      {
         fputc(0xBC,reset);
         delay_ms(10);
      }
      delay_ms(1000);
      if(reset_bffr[0] == 0xCB && RESET_DATA == 1)
      {
         BC_OPERATION();
         BC_ATTEMPT_FLAG++;
         STORE_FLAG_INFO();
         STORE_ADRESS_DATA_TO_FLASH();
         reset_bffr[0] = 0;
         CMD_FROM_PC[1] = 0;
         RESET_DATA = 0;
         delay_ms(4000);
      }
   }
   //try 5 times for reliability
   AUTOMATICAL_MISSION_CHECK();
   AUTOMATICAL_MISSION_CHECK();
   AUTOMATICAL_MISSION_CHECK();
   AUTOMATICAL_MISSION_CHECK();
   AUTOMATICAL_MISSION_CHECK();
   
   RESET_DATA = 0;
   while(true)
   {
      
      if(reset_flag == 1)//get ready for reset satellite
      {
         STORE_FLAG_INFO();
         Save_RSV();
         STORE_ADRESS_DATA_TO_FLASH();
         while(true)
         {
            fputc(0x27,PC);
            fprintf(PC,"%x,",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-117));
            fprintf(PC,"%x,",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-116));
            fprintf(PC,"%x,",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-115));
            fprintf(PC,"%x",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-114));
            fprintf(PC,"%x\r\n",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-113));
            
            fputc(0x27,reset);
            //delay_ms(100);//if it is needed
            fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-117),reset);
            fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-116),reset);
            fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-115),reset);
            fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-114),reset);
            fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-113),reset);
            RESET_DATA = 0;
            fprintf(PC,"get ready for reset");
            delay_ms(1000);
         }
      }
      
      if(FAB_FLAG > 89)
      {
         FAB_FLAG = 0;
         fprintf(PC,"90sec passed\r\n");
         FAB_TEST_OPERATION();
         COM_DATA = 0;
         STORE_ADRESS_DATA_TO_FLASH();//for store the flag
         fprintf(PC,"CW:");
         for(int i = 0; i < 4; i++)
         {
            fprintf(PC,"%x,",CW_FORMAT[i]);
         }
         fprintf(PC,"%x\r\n",CW_FORMAT[4]);
         DELETE_CMD_FROM_PC();
         PC_DATA = 0;
         COM_DATA = 0;
         RESET_DATA = 0;
      }   
      
      if((RESERVE_MIN_FLAG >= RESERVE_TARGET_FLAG) && RESERVE_CHECK == 1)
      {
         fprintf(PC,"execute reserved command\r\n");
         EXECUTE_MISSION_from_PC(MISSION_CONTENTS,MISSION_DETAIL);
         Remove_1_Reservation();//remove the finished command and sort again and save updated command table
         if(reserve_table[30] != 0x00)
         {
            Reserve_next();
         }else{
            RESERVE_TARGET_FLAG = 0; //reset flag
            RESERVE_CHECK = 0;
            MISSION_CONTENTS = 0;
            MISSION_DETAIL = 0;
         }
         
      }
      
      if(buffer_from_com)
      {
         for(COM_DATA = 0; COM_DATA < 16; COM_DATA++)//dhisplay command
         {
            fputc(in_bffr_main[COM_DATA],PC);
         }
         COM_DATA = 0;
         //disable_interrupts(global);
         fprintf(PC,"COM COMMAND\r\n");
         if(in_bffr_main[5] == 0)
         {
            EXECUTE_MISSION_from_COM(in_bffr_main[4],in_bffr_main[6]);
         }else{
            SAVE_SAT_LOG(in_bffr_main[4],in_bffr_main[5],in_bffr_main[6]);//reservation command log
            Reserve_command_COM();
         }
         DELETE_CMD_FROM_PC();
         Delete_Buffer();
         CMD_FROM_PC[1] = 0;
         COM_DATA = 0;
         PC_DATA = 0;
         //enable_interrupts(global);
      }
      
      
      
      if(CMD_FROM_PC[0])
      {
         fprintf(PC,"PC COMMAND:");
         for(int m = 0; m < 16; m++)
         {
            fprintf(PC,"%x",in_bffr_main[m]);
         }
         fprintf(PC,"\r\n");

         if(CMD_FROM_PC[1] == 0)//if time data is placed
         {
            EXECUTE_MISSION_from_PC(CMD_FROM_PC[0],CMD_FROM_PC[2]);//execute mission
         }else{
            SAVE_SAT_LOG(CMD_FROM_PC[0],CMD_FROM_PC[1],CMD_FROM_PC[2]);//reservation command log
            Reserve_command_PC();//mission command reservation
         }
         DELETE_CMD_FROM_PC();
         Delete_Buffer();
         CMD_FROM_PC[1] = 0;
         COM_DATA = 0;
         PC_DATA = 0;
      }
      
      if(COM_DATA != 0 || PC_DATA != 0)
      {
         delay_ms(500);
         if(COM_DATA != 0)
         {
            CMD_FROM_PC[1] = 0;
            COM_DATA = 0;
            PC_DATA = 0;
         }
      }
      //waiting(100000);
      delay_ms(500);
      //{
      //    fputc(in_HK[ia],PC);
      //}
//      FAB_DATA =0;
//      fputc(0x61,FAB);
//      delay_ms(3000);
   }
}
