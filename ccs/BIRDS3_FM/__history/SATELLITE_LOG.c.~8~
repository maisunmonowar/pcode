void waiting(int32 counterval)//about 200000 : 1s
{
   for(int32 num = 0; num < counterval; num++)
   {}
   return;
}

//--------RESET Current Collection---------------------------------------------
#define Reset_size 11 //1byte ack, 4byte time, 10byte sensor
int8 RESET_DATA = 0;
int8 reset_bffr[Reset_size] = {};

void DELETE_RESET()
{
   for(int8 num = 0; num < Reset_size; num++)
   {
      reset_bffr[num] = 0;
   }
   return;
}

void COLLECT_RESET_DATA()
{
   DELETE_RESET();
   RESET_DATA = 0;
   //disable_interrupts(INT_rda2);
   //disable_interrupts(INT_rda3);
   //enable_interrupts(INT_rda4);
   for(int16 num = 0; num < 100; num++)
   {
      fputc(0x28,reset);
   }
   waiting(10000);
   //disable_interrupts(INT_rda4);
   //enable_interrupts(INT_rda2);
   //enable_interrupts(INT_rda3);
   return;
}

//@@@@@@@@@@@for satellite log@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#define logdata_size 11
int8 satellitelog[logdata_size] = {};

void SAVE_SAT_LOG(int8 data1, int8 data2)
{
   COLLECT_RESET_DATA();
   if(RESET_bffr[0] == 0x8e)
   {
      satellitelog[0] = 0xda;//header of the satellite log
      satellitelog[1] = 0xda;//header of the satellite log
   
      satellitelog[2] = RESET_bffr[1];
      satellitelog[3] = RESET_bffr[2];
      satellitelog[4] = RESET_bffr[3];
      satellitelog[5] = RESET_bffr[4];
      satellitelog[6] = RESET_bffr[5];
      
      satellitelog[7] = data1;
      satellitelog[8] = data2;
      satellitelog[9] = 0xef;
      satellitelog[10] = 0xef;
      
      output_low(PIN_A5);//CAM_MUX
      output_low(PIN_C4);//COM_MUX
      for(int i = 0; i < logdata_size; i++)//write to the 
      {
         WRITE_DATA_BYTE_OF(SAT_LOG + i,satellitelog[i]);
      }
      output_high(PIN_C4);//COM_MUX
      SAT_LOG = SAT_LOG + 11;
   }
   
   return;
}



