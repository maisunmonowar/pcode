//-------------------------ADDRESS (PREVIOUS)----------------------------------
//!/////////////////previous//////////////////////////////
//!Static int32 ADCS_SENSOR_ADDRESS = 65536*500;
//!Static int32 FAB_HK_ADDRESS = 65536 * 200;
//!Static int32 FAB_CW_ADDRESS = 65536 * 50;
//!Static int32 FAB_CW_ADDRESS_FOR_MF = 65536; //sector1
//!Static int32 HIGH_SAMP_HK_ADDRESS = 65536 * 1800;
//!Static int32 CAM_ADDRESS = 65536;
//!Static int32 DC_STATUS_ADDRESS = 65536*300;
//!///////////////////////////////////////////////////////

Static int32 ADD_INFO_ADDRESS = 4096;//for keeping the address data to flash memory
Static int16 ADDRESS_WRITING_COUNTER = 0;//if address writing more than 30000 times, change the store address

Static int32 FLAG_DATA_ADDRESS = 65536*4;//1sector
Static int32 RSV_DATA_ADDRESS=65536*5;//1sector
Static int32 SAT_LOG = 65536*6;//2sector
Static int32 CAM_ADDRESS = 65536*8;//90sector
Static int32 FAB_HK_ADDRESS = 65536*98;//1000sector
Static int32 FAB_CW_ADDRESS = 65536*1098;//40sector
Static int32 FAB_CW_ADDRESS_FOR_MF = FAB_CW_ADDRESS;//40sector
Static int32 ADCS_SENSOR_ADDRESS = 65536*1138;//500sector
Static int32 DC_STATUS_ADDRESS = 65536*1638;//1sector
Static int32 HIGH_SAMP_HK_ADDRESS = 65536*1639;//409sector


#define FLAG_DATA_ADDRESS_END  65536*5-26
#define RSV_DATA_ADDRESS_END  65536*6-60
#define SAT_LOG_END  65536*8-20
#define CAM_ADDRESS_END  65536*98-65536*2
#define FAB_HK_ADDRESS_END  65536*1098-65536-226
#define FAB_CW_ADDRESS_END  65536*1138-10
#define FAB_CW_ADDRESS_FOR_MF_END FAB_CW_ADDRESS_END
#define ADCS_SENSOR_ADDRESS_END  65536*1638-85500
#define DC_STATUS_ADDRESS_END 65536*1639-800
#define HIGH_SAMP_HK_ADDRESS_END  65536*2047-169920

int8 BC_ATTEMPT_FLAG = 0;
int16 PASSED_DAYS = 0;
int8 RESERVE_CHECK = 0;
int8 RESERVE_MIN_FLAG = 0;
int32 RESERVE_TARGET_FLAG = 0;
int8 MISSION_CONTENTS = 0;
int8 Kill_FLAG_MAIN = 0;
int8 Kill_FLAG_FAB = 0;
int8 FIRST_HSSC_DONE = 0;
int8 AUTO_CAM_DONE = 0;
int8 AUTO_LDM_DONE = 0;
int8 AUTO_ADCS_DONE = 0;
int8 ANT_DEP_STATUS = 0;


//---------OTHER FUNCTUON------------------------------------------------------
#define FLASH_ADD_SIZE 43//10 kinds of address(40byte), 1 frag(1byte), 1 WITING COUNTER(2byte)
#define FLAG_INFO_SIZE 13
unsigned int8 sec_add_bfr[FLASH_ADD_SIZE] = {};
unsigned int8 flag_info_bffr[FLAG_INFO_SIZE] = {};

void CURRENT_FLAG_STATUS()
{
   fprintf(PC,"ANTENNA DEPLOY ATTEMPT:%x\r\n",BC_ATTEMPT_FLAG);
   fprintf(PC,"PASSED DAYS:%x\r\n",PASSED_DAYS);
   fprintf(PC,"RESERVE CHECK:%x\r\n",RESERVE_CHECK);
   return;
}

void CURRENT_ADDRESS_OF_FLASH()
{  
   fprintf(PC,"\r\nADD INFO ADDRESS:%lx\r\n\r\n",ADD_INFO_ADDRESS);
   fprintf(PC,"FLAG DATA ADDRESS:%x%x%x%x\r\n",FLAG_DATA_ADDRESS>>24,FLAG_DATA_ADDRESS>>16,FLAG_DATA_ADDRESS>>8,FLAG_DATA_ADDRESS);
   fprintf(PC,"RESERVATION TABLE ADDRESS:%x%x%x%x\r\n",RSV_DATA_ADDRESS>>24,RSV_DATA_ADDRESS>>16,RSV_DATA_ADDRESS>>8,RSV_DATA_ADDRESS);
   fprintf(PC,"SATELLITE LOG ADDRESS:%x%x%x%x\r\n",SAT_LOG>>24,SAT_LOG>>16,SAT_LOG>>8,SAT_LOG);
   fprintf(PC,"CAM ADDRESS:%x%x%x%x\r\n",CAM_ADDRESS>>24,CAM_ADDRESS>>16,CAM_ADDRESS>>8,CAM_ADDRESS);
   fprintf(PC,"FAB HK ADDRESS:%x%x%x%x\r\n",FAB_HK_ADDRESS>>24,FAB_HK_ADDRESS>>16,FAB_HK_ADDRESS>>8,FAB_HK_ADDRESS);
   fprintf(PC,"FAB CW ADDERSS:%x%x%x%x\r\n",FAB_CW_ADDRESS_FOR_MF>>24,FAB_CW_ADDRESS_FOR_MF>>16,FAB_CW_ADDRESS_FOR_MF>>8,FAB_CW_ADDRESS_FOR_MF);
   fprintf(PC,"ADCS SENSOR ADDRESS:%x%x%x%x\r\n",ADCS_SENSOR_ADDRESS>>24,ADCS_SENSOR_ADDRESS>>16,ADCS_SENSOR_ADDRESS>>8,ADCS_SENSOR_ADDRESS);
   fprintf(PC,"LDM ADDRESS:%x%x%x%x\r\n",DC_STATUS_ADDRESS>>24,DC_STATUS_ADDRESS>>16,DC_STATUS_ADDRESS>>8,DC_STATUS_ADDRESS);
   fprintf(PC,"HIGH SAMP HK ADDERSS:%x%x%x%x\r\n",HIGH_SAMP_HK_ADDRESS>>24,HIGH_SAMP_HK_ADDRESS>>16,HIGH_SAMP_HK_ADDRESS>>8,HIGH_SAMP_HK_ADDRESS);
   fprintf(PC,"ANTENNA DEPLOY ATTEMPT:%x\r\n\r\n",BC_ATTEMPT_FLAG);
   fprintf(PC,"WRITE %ld TIMES\r\n",ADDRESS_WRITING_COUNTER);
   
   //fprintf(PC,"Kill Flag:%d\r\n",Kill_Flag);
   //delay_ms(5000);
   return;
}

void WRITE_FLAG_to_EEPROM()
{
   WRITE_PROGRAM_EEPROM(0xff000000, BC_ATTEMPT_FLAG);
   return;
}
void READ_FLAG_from_EEPROM()
{
   BC_ATTEMPT_FLAG = READ_PROGRAM_EEPROM(0xff000000);
   fprintf(PC,"BC=%x",BC_ATTEMPT_FLAG);
   return;
}

void STORE_FLAG_INFO()//save flag data to flash memory
{
   flag_info_bffr[0] = BC_ATTEMPT_FLAG;
   flag_info_bffr[1] = PASSED_DAYS;
   flag_info_bffr[2] = RESERVE_CHECK;
   flag_info_bffr[3] = RESERVE_TARGET_FLAG;
   flag_info_bffr[4] = RESERVE_MIN_FLAG;
   flag_info_bffr[5] = MISSION_CONTENTS;
   flag_info_bffr[6] = Kill_FLAG_MAIN;
   flag_info_bffr[7] = Kill_FLAG_FAB;
   flag_info_bffr[8] = FIRST_HSSC_DONE;
   flag_info_bffr[9] = AUTO_CAM_DONE;
   flag_info_bffr[10] = AUTO_LDM_DONE;
   flag_info_bffr[11] = AUTO_ADCS_DONE;
   flag_info_bffr[12] = ANT_DEP_STATUS;
   
   SUBSECTOR_4KB_ERASE_OF(FLAG_DATA_ADDRESS);
   SUBSECTOR_4KB_ERASE_SCF(FLAG_DATA_ADDRESS);
   //sector_erase_OF(0);
   for(int8 num = 0; num < FLAG_INFO_SIZE; num++)
   {
      WRITE_DATA_BYTE_OF(FLAG_DATA_ADDRESS + num,flag_info_bffr[num]);
   }
   
   for(num = 0; num < FLAG_INFO_SIZE; num++)
   {
      WRITE_DATA_BYTE_SCF(FLAG_DATA_ADDRESS + num,flag_info_bffr[num]);
   }
   fprintf(PC,"Storeing FLAG INFO DONE\r\n");
   return;
   
}

void READ_WRTITING_ADDRESS_LOCATION()
{
   if(READ_DATA_BYTE_OF(0) != 0xff)
   {
      for(int s = 0; s < 100; s++)
      {
         fprintf(PC,"%x,",READ_DATA_BYTE_OF(s));
      }
      fprintf(PC,"\r\n");
      int8 ad_location_bfr[4];
      ad_location_bfr[0] = READ_DATA_BYTE_OF(0);
      ad_location_bfr[1] = READ_DATA_BYTE_OF(1);
      ad_location_bfr[2] = READ_DATA_BYTE_OF(2);
      ad_location_bfr[3] = READ_DATA_BYTE_OF(3);
      ADD_INFO_ADDRESS = make32(ad_location_bfr[0],ad_location_bfr[1],ad_location_bfr[2],ad_location_bfr[3]);
      fprintf(PC,"\r\nadd:%lx\r\n",ADD_INFO_ADDRESS);
   }else if(READ_DATA_BYTE_OF(0) == 0xff){
      unsigned int8 address_place[4] = {};
      address_place[0] = ADD_INFO_ADDRESS >> 24;
      address_place[1] = ADD_INFO_ADDRESS >> 16;
      address_place[2] = ADD_INFO_ADDRESS >> 8;
      address_place[3] = ADD_INFO_ADDRESS;
      
      for(int i = 0; i < 4; i++)//store the subsector(location) information
      {
         WRITE_DATA_BYTE_OF(i,address_place[i]);
         WRITE_DATA_BYTE_SCF(i,address_place[i]);
         WRITE_DATA_BYTE_SMF(i,address_place[i]);
      }
      fprintf(PC,"first putting\r\n");
      for(i = 0; i < 4; i++)//store the subsector(location) information
      {
         fprintf(PC,"%x,,",READ_DATA_BYTE_OF(i));
      }
      fprintf(PC,"\r\n");
      fprintf(PC,"%lx\r\n",ADD_INFO_ADDRESS);
   }
   return;
}

void CHANGE_ADDRESS_WRITING_LOCATION()
{
   int16 AD_COUNTER = make16(READ_DATA_BYTE_OF(ADD_INFO_ADDRESS+41),READ_DATA_BYTE_OF(ADD_INFO_ADDRESS+42));//check counter value
   fprintf(PC,"AD COUNTER:%ld\r\n",AD_COUNTER);
   if(((AD_COUNTER > 5000) && (AD_COUNTER != 0xffff)) && (READ_DATA_BYTE_OF(0) != 0xff))
   {
      
      SUBSECTOR_4KB_ERASE_OF(0);
      SUBSECTOR_4KB_ERASE_SCF(0);
      SUBSECTOR_4KB_ERASE_SMF(0);
      ADDRESS_WRITING_COUNTER = 0;//reset counter
      ADD_INFO_ADDRESS = ADD_INFO_ADDRESS + 0x00001000;//use next subsector
      
      unsigned int8 address_place[4] = {};
      address_place[0] = ADD_INFO_ADDRESS >> 24;
      address_place[1] = ADD_INFO_ADDRESS >> 16;
      address_place[2] = ADD_INFO_ADDRESS >> 8;
      address_place[3] = ADD_INFO_ADDRESS;
      
      //turn off COM MUX
      //turn off CAM MUX
      for(int i = 0; i < 4; i++)//store the subsector(location) information
      {
         WRITE_DATA_BYTE_OF(i,address_place[i]);
         WRITE_DATA_BYTE_SCF(i,address_place[i]);
         WRITE_DATA_BYTE_SMF(i,address_place[i]);
      }
      
      fprintf(PC,"CHANGE MEMORY ADDRESS\r\n");
      
      for(i = 0; i < 4; i++)//store the subsector(location) information
      {
         fprintf(PC,"%x",READ_DATA_BYTE_OF(i));
         //WRITE_DATA_BYTE_SCF(i,address_place[i]);
         //WRITE_DATA_BYTE_SMF(i,address_place[i]);
      }
      
      fprintf(PC,"\r\nCHANGE MEMORY ADDRESS\r\n");
   }
   
   return;
}

void TAKE_FLAG_INFO_FROM_OF()
{
   for(int8 num = 0; num < FLAG_INFO_SIZE; num++)
   {
      flag_info_bffr[num] = READ_DATA_BYTE_OF(FLAG_DATA_ADDRESS + num);
      //delay_ms(1);
   }
   return;
}

void STORE_ADRESS_DATA_TO_FLASH()
{
   fprintf(PC,"Start Storeing\r\n");
   ADDRESS_WRITING_COUNTER++;
   CHANGE_ADDRESS_WRITING_LOCATION();//if write over 30000 times, change the address info location
   sec_add_bfr[0] = FLAG_DATA_ADDRESS >> 24;
   sec_add_bfr[1] = FLAG_DATA_ADDRESS >> 16;
   sec_add_bfr[2] = FLAG_DATA_ADDRESS >> 8;
   sec_add_bfr[3] = FLAG_DATA_ADDRESS;
      
   sec_add_bfr[4] = RSV_DATA_ADDRESS >> 24;
   sec_add_bfr[5] = RSV_DATA_ADDRESS >> 16;
   sec_add_bfr[6] = RSV_DATA_ADDRESS >> 8;
   sec_add_bfr[7] = RSV_DATA_ADDRESS;
   
   sec_add_bfr[8] = SAT_LOG >> 24;
   sec_add_bfr[9] = SAT_LOG >> 16;
   sec_add_bfr[10] = SAT_LOG >> 8;
   sec_add_bfr[11] = SAT_LOG;
   
   sec_add_bfr[12] = CAM_ADDRESS >> 24;
   sec_add_bfr[13] = CAM_ADDRESS >> 16;
   sec_add_bfr[14] = CAM_ADDRESS >> 8;
   sec_add_bfr[15] = CAM_ADDRESS;
   
   sec_add_bfr[16] = FAB_HK_ADDRESS >> 24;
   sec_add_bfr[17] = FAB_HK_ADDRESS >> 16;
   sec_add_bfr[18] = FAB_HK_ADDRESS >> 8;
   sec_add_bfr[19] = FAB_HK_ADDRESS;
   
   sec_add_bfr[20] = FAB_CW_ADDRESS >> 24;
   sec_add_bfr[21] = FAB_CW_ADDRESS >> 16;
   sec_add_bfr[22] = FAB_CW_ADDRESS >> 8;
   sec_add_bfr[23] = FAB_CW_ADDRESS;
   
   sec_add_bfr[24] = FAB_CW_ADDRESS_FOR_MF >> 24;
   sec_add_bfr[25] = FAB_CW_ADDRESS_FOR_MF >> 16;
   sec_add_bfr[26] = FAB_CW_ADDRESS_FOR_MF >> 8;
   sec_add_bfr[27] = FAB_CW_ADDRESS_FOR_MF;
   
   sec_add_bfr[28] = ADCS_SENSOR_ADDRESS >> 24;
   sec_add_bfr[29] = ADCS_SENSOR_ADDRESS >> 16;
   sec_add_bfr[30] = ADCS_SENSOR_ADDRESS >> 8;
   sec_add_bfr[31] = ADCS_SENSOR_ADDRESS;
   
   sec_add_bfr[32] = DC_STATUS_ADDRESS >> 24;
   sec_add_bfr[33] = DC_STATUS_ADDRESS >> 16;
   sec_add_bfr[34] = DC_STATUS_ADDRESS >> 8;
   sec_add_bfr[35] = DC_STATUS_ADDRESS;
   
   sec_add_bfr[36] = HIGH_SAMP_HK_ADDRESS >> 24;
   sec_add_bfr[37] = HIGH_SAMP_HK_ADDRESS >> 16;
   sec_add_bfr[38] = HIGH_SAMP_HK_ADDRESS >> 8;
   sec_add_bfr[39] = HIGH_SAMP_HK_ADDRESS;
   
   sec_add_bfr[40] = BC_ATTEMPT_FLAG;
   
   sec_add_bfr[41] = ADDRESS_WRITING_COUNTER >> 8;
   sec_add_bfr[42] = ADDRESS_WRITING_COUNTER;
   
   SUBSECTOR_4KB_ERASE_OF(ADD_INFO_ADDRESS);
   SUBSECTOR_4KB_ERASE_SCF(ADD_INFO_ADDRESS);
   
   for(int8 num = 0; num < FLASH_ADD_SIZE; num++)
   {
      WRITE_DATA_BYTE_OF(ADD_INFO_ADDRESS + num,sec_add_bfr[num]);
   }
   
   for(num = 0; num < FLASH_ADD_SIZE; num++)
   {
      WRITE_DATA_BYTE_SCF(ADD_INFO_ADDRESS + num,sec_add_bfr[num]);
   }
   
   fprintf(PC,"Storeing ADD DONE:%lx\r\n",ADD_INFO_ADDRESS);
   return;
}

void TAKE_ADDRESS_DATA_FROM_OF()
{  
   //READ_WRTITING_ADDRESS_LOCATION();
   for(int8 num = 0; num < FLASH_ADD_SIZE; num++)
   {
      sec_add_bfr[num] = READ_DATA_BYTE_OF(ADD_INFO_ADDRESS + num);
      //delay_ms(1);
   }
   return;
}

void MAKE_FLAG_INFO()
{
   BC_ATTEMPT_FLAG     = flag_info_bffr[0];
   PASSED_DAYS         = flag_info_bffr[1];
   RESERVE_CHECK       = flag_info_bffr[2];
   RESERVE_TARGET_FLAG = flag_info_bffr[3];
   RESERVE_MIN_FLAG    = flag_info_bffr[4];
   MISSION_CONTENTS    = flag_info_bffr[5];
   Kill_FLAG_MAIN      = flag_info_bffr[6];
   Kill_FLAG_FAB       = flag_info_bffr[7];
   FIRST_HSSC_DONE     = flag_info_bffr[8];
   AUTO_CAM_DONE       = flag_info_bffr[9];
   AUTO_LDM_DONE       = flag_info_bffr[10];
   AUTO_ADCS_DONE      = flag_info_bffr[11];
   ANT_DEP_STATUS      = flag_info_bffr[12];
   return;
}

void MAKE_ADDRESS_DATA()
{

   FLAG_DATA_ADDRESS = make32(sec_add_bfr[0],sec_add_bfr[1],sec_add_bfr[2],sec_add_bfr[3]);//FLAG_DATA_ADDRESS_1 | FLAG_DATA_ADDRESS_2 | FLAG_DATA_ADDRESS_3 | FLAG_DATA_ADDRESS_4;
   
   RSV_DATA_ADDRESS = make32(sec_add_bfr[4],sec_add_bfr[5],sec_add_bfr[6],sec_add_bfr[7]);//RSV_DATA_ADDRESS_1| RSV_DATA_ADDRESS_2 | RSV_DATA_ADDRESS_3 | RSV_DATA_ADDRESS_4;
   
   SAT_LOG = make32(sec_add_bfr[8],sec_add_bfr[9],sec_add_bfr[10],sec_add_bfr[11]);//SAT_LOG_1 | SAT_LOG_2 | SAT_LOG_3 | SAT_LOG_4;
   
   CAM_ADDRESS = make32(sec_add_bfr[12],sec_add_bfr[13],sec_add_bfr[14],sec_add_bfr[15]);//CAM_ADDRESS_1 | CAM_ADDRESS_2 | CAM_ADDRESS_3 | CAM_ADDRESS_4;
   
   FAB_HK_ADDRESS = make32(sec_add_bfr[16],sec_add_bfr[17],sec_add_bfr[18],sec_add_bfr[19]);//FAB_HK_ADDRESS_1 | FAB_HK_ADDRESS_2 | FAB_HK_ADDRESS_3 | FAB_HK_ADDRESS_4;

   FAB_CW_ADDRESS = make32(sec_add_bfr[20],sec_add_bfr[21],sec_add_bfr[22],sec_add_bfr[23]);//FAB_CW_ADDRESS_1| FAB_CW_ADDRESS_2 | FAB_CW_ADDRESS_3 | FAB_CW_ADDRESS_4;
   
   FAB_CW_ADDRESS_FOR_MF = make32(sec_add_bfr[24],sec_add_bfr[25],sec_add_bfr[26],sec_add_bfr[27]);//FAB_CW_ADDRESS_FOR_MF = FAB_CW_ADDRESS_FOR_MF_1 | FAB_CW_ADDRESS_FOR_MF_2 | FAB_CW_ADDRESS_FOR_MF_3 | FAB_CW_ADDRESS_FOR_MF_4;
   
   ADCS_SENSOR_ADDRESS = make32(sec_add_bfr[28],sec_add_bfr[29],sec_add_bfr[30],sec_add_bfr[31]);//ADCS_SENSOR_ADDRESS_1 | ADCS_SENSOR_ADDRESS_2 | ADCS_SENSOR_ADDRESS_3 | ADCS_SENSOR_ADDRESS_4;
   
   DC_STATUS_ADDRESS = make32(sec_add_bfr[32],sec_add_bfr[33],sec_add_bfr[34],sec_add_bfr[35]);//DC_STATUS_ADDRESS_1 | DC_STATUS_ADDRESS_2 | DC_STATUS_ADDRESS_3 | DC_STATUS_ADDRESS_4;
   
   HIGH_SAMP_HK_ADDRESS = make32(sec_add_bfr[36],sec_add_bfr[37],sec_add_bfr[38],sec_add_bfr[39]);//HIGH_SAMP_HK_ADDRESS = HIGH_SAMP_HK_ADDRESS_1 | HIGH_SAMP_HK_ADDRESS_2 | HIGH_SAMP_HK_ADDRESS_3 | HIGH_SAMP_HK_ADDRESS_4;
   
   BC_ATTEMPT_FLAG = sec_add_bfr[40];
   
   ADDRESS_WRITING_COUNTER = make16(sec_add_bfr[41],sec_add_bfr[42]);//ADDRESS_WRITING_COUNTER_1 | ADDRESS_WRITING_COUNTER_2
   
   return;
}

void CHECK_FLAG_INFO()
{
   int8 checksum = 0;
   TAKE_FLAG_INFO_FROM_OF();
   for(int8 num = 0; num < FLAG_INFO_SIZE; num++)
   {
      if(flag_info_bffr[num] == 0xff)
      {
         checksum++;
      }
   }
   fprintf(PC,"%d",checksum);
   
   if(checksum != FLAG_INFO_SIZE)//if something stored
   {
      for(num = 0; num < FLAG_INFO_SIZE; num++)
      {
         fprintf(PC,"%x",flag_info_bffr[num]);
      }
      MAKE_FLAG_INFO();
   }
   checksum = 0;
   return;
}

void CHECK_ADDRESS_DATA()
{
   int8 checksum = 0;
   TAKE_ADDRESS_DATA_FROM_OF();
   for(int8 num = 37; num < 41; num++)//check the data of last 4 byte
   {
      if(sec_add_bfr[num] == 0xff)//if nothing, count checksum
      {
         checksum++;
      }
   }
   
   fprintf(PC,"%d",checksum);
   
   if(checksum != 4)//if something stored(if last 4 byte were not 0xff)
   {
      for(num = 0; num < FLASH_ADD_SIZE; num++)
      {
         fprintf(PC,"%x",sec_add_bfr[num]);
      }
      MAKE_ADDRESS_DATA();
   }
   checksum = 0;
   
//!   if(READ_PROGRAM_EEPROM(0) != 0xff)
//!   {
//!      READ_FLAG_from_EEPROM();
//!   }
   
   return;
}

//////////////////////////
//FAB_HK_ADDRESS        //
//FAB_CW_ADDRESS        //
//ADCS_SENSOR_ADDRESS   //
//CAM_ADDRESS           //
//DC_STATUS_ADDRESS     //
//////////////////////////
void MEMORY_ERASE()
{
   fprintf(PC,"ERASE START\r\n");
   sector_erase_OF(0);
   sector_erase_SCF(0);
   sector_erase_SMF(0);
   
   sector_erase_OF(FAB_CW_ADDRESS);
   sector_erase_SCF(FAB_CW_ADDRESS);
   sector_erase_SMF(FAB_CW_ADDRESS);
   
   
   for(int8 num = 0; num < 6; num++)
   {
      sector_erase_OF(FLAG_DATA_ADDRESS + 65536*num);
      sector_erase_OF(CAM_ADDRESS + 65536*num);
      sector_erase_OF(FAB_HK_ADDRESS + 65536*num);
      sector_erase_OF(ADCS_SENSOR_ADDRESS + 65536*num);
      sector_erase_OF(DC_STATUS_ADDRESS + 65536*num);
      sector_erase_OF(HIGH_SAMP_HK_ADDRESS + 65536*num);
      
      sector_erase_SCF(FLAG_DATA_ADDRESS + 65536*num);
      sector_erase_SCF(CAM_ADDRESS + 65536*num);
      sector_erase_SCF(FAB_HK_ADDRESS + 65536*num);
      sector_erase_SCF(ADCS_SENSOR_ADDRESS + 65536*num);
      sector_erase_SCF(DC_STATUS_ADDRESS + 65536*num);
      sector_erase_SCF(HIGH_SAMP_HK_ADDRESS + 65536*num);
      
      sector_erase_SMF(FLAG_DATA_ADDRESS + 65536*num);
      sector_erase_SMF(CAM_ADDRESS + 65536*num);
      sector_erase_SMF(FAB_HK_ADDRESS + 65536*num);
      sector_erase_SMF(ADCS_SENSOR_ADDRESS + 65536*num);
      sector_erase_SMF(DC_STATUS_ADDRESS + 65536*num);
      sector_erase_SMF(HIGH_SAMP_HK_ADDRESS + 65536*num); 
   }
   for(num = 6; num < 15; num++)
   {
      sector_erase_OF(CAM_ADDRESS + 65536*num);
      sector_erase_OF(FAB_HK_ADDRESS + 65536*num);
      sector_erase_OF(HIGH_SAMP_HK_ADDRESS + 65536*num);
      
      sector_erase_SCF(CAM_ADDRESS + 65536*num);
      sector_erase_SCF(FAB_HK_ADDRESS + 65536*num);
      sector_erase_SCF(HIGH_SAMP_HK_ADDRESS + 65536*num);
      
      sector_erase_SMF(CAM_ADDRESS + 65536*num);
      sector_erase_SMF(FAB_HK_ADDRESS + 65536*num);
      sector_erase_SMF(HIGH_SAMP_HK_ADDRESS + 65536*num); 
   }
   
   
   fprintf(PC,"DONE");
   delay_ms(5000);
   return;
}

//@@@@@@@@@@@@@@@@@@MISSION LOOP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
void LOOP_FLAG_DATA_ADDRESS()
{
   
   if(FLAG_DATA_ADDRESS > FLAG_DATA_ADDRESS_END)
   {
   }
   return;
}

void LOOP_RSV_DATA_ADDRESS()
{
   if(RSV_DATA_ADDRESS > RSV_DATA_ADDRESS_END)
   {
      
   }
   return;
}

void LOOP_SAT_LOG()
{
   if(SAT_LOG > SAT_LOG_END)
   {
      sector_erase_OF(65536*7);
      sector_erase_SCF(65536*7);
      sector_erase_SMF(65536*7);
      SAT_LOG = 65536*7;//keep first 1 sector forever
   }
   return;
}

void LOOP_CAM_ADDRESS()
{
   if(CAM_ADDRESS > CAM_ADDRESS_END)
   {
      sector_erase_OF(65536*8);
      sector_erase_SCF(65536*8);
      sector_erase_SMF(65536*8);
      CAM_ADDRESS = 65536*8;
   }else{
      sector_erase_OF(CAM_ADDRESS);//erase next sector 
      sector_erase_SCF(CAM_ADDRESS);//erase next sector 
      sector_erase_SMF(CAM_ADDRESS);//erase next sector 
   }
   return;
}

void LOOP_FAB_HK_ADDRESS()
{
   int32 checksum = FAB_HK_ADDRESS && 0x0000ffff;
   if(FAB_HK_ADDRESS > FAB_HK_ADDRESS_END)
   {
      sector_erase_OF(65536*98);
      sector_erase_SCF(65536*98);
      sector_erase_SMF(65536*98);
      FAB_HK_ADDRESS = 65536*8;
   }else if(65536 - checksum < 119){ //if value will be close to the sector
      fprintf(PC,"erasing next sector\r\n");
      sector_erase_OF(FAB_HK_ADDRESS + 65536);
      sector_erase_SCF(FAB_HK_ADDRESS + 65536);
      sector_erase_SMF(FAB_HK_ADDRESS + 65536);
   }
   return;
}

void LOOP_FAB_CW_ADDRESS()
{
   int32 checksum = FAB_CW_ADDRESS && 0x0000ffff;
   if(FAB_CW_ADDRESS > FAB_CW_ADDRESS_END)
   {
      sector_erase_OF(65536*1098);
      sector_erase_SCF(65536*1098);
      sector_erase_SMF(65536*1098);
      FAB_CW_ADDRESS = 65536*1098;
      FAB_CW_ADDRESS_FOR_MF = FAB_CW_ADDRESS;
   }else if(65536 - checksum < 5){ //if value will be close to the sector
      fprintf(PC,"erasing next sector\r\n");
      sector_erase_OF(FAB_CW_ADDRESS + 65536);//erase next sector in advance
      sector_erase_SCF(FAB_CW_ADDRESS + 65536);//erase next sector in advance
      sector_erase_SMF(FAB_CW_ADDRESS + 65536);//erase next sector in advance
   }
   return;
}


void LOOP_ADCS_SENSOR_ADDRESS()
{
   if(ADCS_SENSOR_ADDRESS > ADCS_SENSOR_ADDRESS_END)//for 15min operation, data size will be more than 1sector
   {
      sector_erase_OF(65536*1140);
      sector_erase_SCF(65536*1140);
      sector_erase_SMF(65536*1140);
      ADCS_SENSOR_ADDRESS = 65536*1140;//keep first 2 sector forever
   }else{ //if value will be close to the sector
      fprintf(PC,"erasing next sector\r\n");
      sector_erase_OF(ADCS_SENSOR_ADDRESS + 65536);//erase next sector in advance
      sector_erase_SCF(ADCS_SENSOR_ADDRESS + 65536);//erase next sector in advance
      sector_erase_SMF(ADCS_SENSOR_ADDRESS + 65536);//erase next sector in advance

      sector_erase_OF(ADCS_SENSOR_ADDRESS + 65536*2);//erase next sector in advance
      sector_erase_SCF(ADCS_SENSOR_ADDRESS + 65536*2);//erase next sector in advance
      sector_erase_SMF(ADCS_SENSOR_ADDRESS + 65536*2);//erase next sector in advance
   }
   return;
}

void LOOP_DC_STATUS_ADDRESS()
{
   int32 checksum = DC_STATUS_ADDRESS && 0x00000fff;
   if(DC_STATUS_ADDRESS > DC_STATUS_ADDRESS_END)
   {
      SUBSECTOR_4KB_ERASE_OF(65536*1639+4096);
      SUBSECTOR_4KB_ERASE_SCF(65536*16394096);
      SUBSECTOR_4KB_ERASE_SMF(65536*1639+4096);
      DC_STATUS_ADDRESS = 65536*1639+4096;//keep first 1 SUBSECTOR forever
   }else if(4096 - checksum < 800){ //if value will be close to the sector
      fprintf(PC,"erasing next sector\r\n");
      SUBSECTOR_4KB_ERASE_OF(DC_STATUS_ADDRESS + 4096);//erase next SUBSECTOR in advance
      SUBSECTOR_4KB_ERASE_SCF(DC_STATUS_ADDRESS + 4096);//erase next SUBSECTOR in advance
      SUBSECTOR_4KB_ERASE_SMF(DC_STATUS_ADDRESS + 4096);//erase next SUBSECTOR in advance
   }
   return;
}

void LOOP_HIGH_SAMP_HK_ADDRESS()
{
   if(HIGH_SAMP_HK_ADDRESS > HIGH_SAMP_HK_ADDRESS_END)//for 15min operation, data size will be more than 2sector
   {
      sector_erase_OF(65536*1642);
      sector_erase_SCF(65536*1642);
      sector_erase_SMF(65536*1642);
      HIGH_SAMP_HK_ADDRESS = 65536*1642;//keep first 3 sector forever
   }else{ //if value will be close to the sector
      fprintf(PC,"erasing next sector\r\n");
      sector_erase_OF(HIGH_SAMP_HK_ADDRESS + 65536);//erase next sector in advance
      sector_erase_SCF(HIGH_SAMP_HK_ADDRESS + 65536);//erase next sector in advance
      sector_erase_SMF(HIGH_SAMP_HK_ADDRESS + 65536);//erase next sector in advance

      sector_erase_OF(HIGH_SAMP_HK_ADDRESS + 65536*2);//erase next sector in advance
      sector_erase_SCF(HIGH_SAMP_HK_ADDRESS + 65536*2);//erase next sector in advance
      sector_erase_SMF(HIGH_SAMP_HK_ADDRESS + 65536*2);//erase next sector in advance
      
      sector_erase_OF(HIGH_SAMP_HK_ADDRESS + 65536*3);//erase next sector in advance
      sector_erase_SCF(HIGH_SAMP_HK_ADDRESS + 65536*3);//erase next sector in advance
      sector_erase_SMF(HIGH_SAMP_HK_ADDRESS + 65536*3);//erase next sector in advance
   }
   return;
}

