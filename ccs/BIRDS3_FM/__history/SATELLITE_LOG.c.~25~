void waiting(int32 counterval)//about 200000 : 1s
{
   for(int32 num = 0; num < counterval; num++)
   {}
   return;
}

//--------RESET function-------------------------------------------------------
#define Reset_size 11 //1byte ack, 4byte time, 10byte sensor
int8 RESET_DATA = 0;
int8 reset_bffr[Reset_size] = {};
int8 reset_flag = 0;

void BC_ON_30min()
{
   if(currenttime > 1805 && BC_ATTEMPT_FLAG == 0)//if first attempt and 30 min(1800sec) passed
   {
      fprintf(PC,"send command to RESET PIC\r\n");
      SAVE_SAT_LOG(0xBC,0x30,0x30);//first 30 min antenna deployment
      for(int num = 0; num < 50; num++)
      {
         fputc(0xBC,reset);
         delay_ms(10);
      }
      delay_ms(1000);
      if(reset_bffr[0] == 0xCB && RESET_DATA == 1)
      {
         BC_OPERATION();
         BC_ATTEMPT_FLAG++;
         //WRITE_FLAG_to_EEPROM();
         STORE_FLAG_INFO();
         STORE_ADRESS_DATA_TO_FLASH();
         reset_bffr[0] = 0;
         RESET_DATA = 0;
         delay_ms(1000);
      }
   }
   return;
}

void DELETE_RESET()
{
   for(int8 num = 0; num < Reset_size; num++)
   {
      reset_bffr[num] = 0;
   }
   return;
}

void RESET_SATELLITE()//if get reset command from reset, prepare for resetting
{
   if(reset_flag == 1)//get ready for reset satellite
   {
      STORE_FLAG_INFO();
      Save_RSV();
      STORE_ADRESS_DATA_TO_FLASH();
      while(true)
      {
         //fputc(0x27,PC);
         fprintf(PC,"%x,",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-117));
         fprintf(PC,"%x,",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-116));
         fprintf(PC,"%x,",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-115));
         fprintf(PC,"%x",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-114));
         fprintf(PC,"%x\r\n",READ_DATA_BYTE_OF(FAB_HK_ADDRESS-113));
         
         fputc(0x27,reset);
         //delay_ms(100);//if it is needed
         fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-117),reset);
         fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-116),reset);
         fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-115),reset);
         fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-114),reset);
         fputc(READ_DATA_BYTE_OF(FAB_HK_ADDRESS-113),reset);
         RESET_DATA = 0;
         fprintf(PC,"get ready for reset");
         delay_ms(1000);
      }
   }
   return;
}

void COLLECT_RESET_DATA()
{
   DELETE_RESET();
   RESET_DATA = 0;
   //disable_interrupts(INT_rda2);
   //disable_interrupts(INT_rda3);
   //enable_interrupts(INT_rda4);
   for(int16 num = 0; num < 100; num++)
   {
      fputc(0x28,reset);
      delay_ms(1);
   }
   waiting(10000);
   //disable_interrupts(INT_rda4);
   //enable_interrupts(INT_rda2);
   //enable_interrupts(INT_rda3);
   return;
}

//@@@@@@@@@@@for satellite log@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#define logdata_size 11
int8 satellitelog[logdata_size] = {};

void SAVE_SAT_LOG(int8 data1, int8 data2, int8 data3)
{
   COLLECT_RESET_DATA();
   if(RESET_bffr[0] == 0x8e)
   {
      satellitelog[0] = 0xda;//header of the satellite log
      satellitelog[1] = 0xda;//header of the satellite log
   
      satellitelog[2] = RESET_bffr[1];
      satellitelog[3] = RESET_bffr[2];
      satellitelog[4] = RESET_bffr[3];
      satellitelog[5] = RESET_bffr[4];
      satellitelog[6] = RESET_bffr[5];
      
      satellitelog[7] = data1;
      satellitelog[8] = data2;
      satellitelog[9] = data3;
      satellitelog[10] = 0xef;//footer
      
      output_low(PIN_A5);//CAM_MUX
      output_low(PIN_C4);//COM_MUX
      for(int i = 0; i < logdata_size; i++)//write to the 
      {
         WRITE_DATA_BYTE_OF(SAT_LOG + i,satellitelog[i]);
         WRITE_DATA_BYTE_SCF(SAT_LOG + i,satellitelog[i]);
         WRITE_DATA_BYTE_SMF(SAT_LOG + i,satellitelog[i]);
      }
      output_high(PIN_C4);//COM_MUX
      SAT_LOG = SAT_LOG + logdata_size;
   }
   
   return;
}



