CCS PCH C Compiler, Version 5.056, 29513               04-Jun-20 17:45

               Filename:   C:\Users\maisun\Documents\PhD\offline\code\ccs\test app 1\app1.lst

               ROM used:   438 bytes (0%)
                           Largest free fragment is 65520
               RAM used:   5 (0%) at main() level
                           10 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
00800:  NOP   
00802:  GOTO   0934
....................  
.................... #include "app1.h" 
.................... #include <18F67J94.h> 
.................... //////////// Standard Header file for the PIC18F67J94 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F67J94 
*
00808:  DATA 0D,0A
0080A:  DATA 76,34
0080C:  DATA 20,25
0080E:  DATA 33,75
00810:  DATA 20,00
*
0087C:  TBLRD*+
0087E:  MOVFF  FF6,07
00882:  MOVFF  FF7,08
00886:  MOVFF  FF8,09
0088A:  MOVFF  FF5,0A
0088E:  RCALL  083A
00890:  MOVFF  07,FF6
00894:  MOVFF  08,FF7
00898:  MOVFF  09,FF8
0089C:  DECFSZ 06,F
0089E:  BRA    087C
008A0:  GOTO   0996 (RETURN)
008A4:  MOVF   09,W
008A6:  CLRF   01
008A8:  SUBWF  08,W
008AA:  BC    08B2
008AC:  MOVFF  08,00
008B0:  BRA    08CA
008B2:  CLRF   00
008B4:  MOVLW  08
008B6:  MOVWF  0A
008B8:  RLCF   08,F
008BA:  RLCF   00,F
008BC:  MOVF   09,W
008BE:  SUBWF  00,W
008C0:  BTFSC  FD8.0
008C2:  MOVWF  00
008C4:  RLCF   01,F
008C6:  DECFSZ 0A,F
008C8:  BRA    08B8
008CA:  RETURN 0
008CC:  MOVF   01,W
008CE:  MOVFF  06,08
008D2:  MOVLW  64
008D4:  MOVWF  09
008D6:  RCALL  08A4
008D8:  MOVFF  00,06
008DC:  MOVF   01,W
008DE:  MOVLW  30
008E0:  BNZ   08F0
008E2:  BTFSS  07.1
008E4:  BRA    08FE
008E6:  BTFSC  07.3
008E8:  BRA    08FE
008EA:  BTFSC  07.4
008EC:  MOVLW  20
008EE:  BRA    08F6
008F0:  BCF    07.3
008F2:  BCF    07.4
008F4:  BSF    07.0
008F6:  ADDWF  01,F
008F8:  MOVFF  01,0A
008FC:  RCALL  083A
008FE:  MOVFF  06,08
00902:  MOVLW  0A
00904:  MOVWF  09
00906:  RCALL  08A4
00908:  MOVFF  00,06
0090C:  MOVF   01,W
0090E:  MOVLW  30
00910:  BNZ   091E
00912:  BTFSC  07.3
00914:  BRA    0926
00916:  BTFSS  07.0
00918:  BRA    0926
0091A:  BTFSC  07.4
0091C:  MOVLW  20
0091E:  ADDWF  01,F
00920:  MOVFF  01,0A
00924:  RCALL  083A
00926:  MOVLW  30
00928:  ADDWF  06,F
0092A:  MOVFF  06,0A
0092E:  RCALL  083A
00930:  GOTO   09A0 (RETURN)
....................  
.................... #list 
....................  
.................... //#device ADC=16 
.................... #use delay(clock=16000000, crystal=16000000) 
*
00812:  CLRF   FEA
00814:  MOVLW  06
00816:  MOVWF  FE9
00818:  MOVF   FEF,W
0081A:  BZ    0838
0081C:  MOVLW  05
0081E:  MOVWF  01
00820:  CLRF   00
00822:  DECFSZ 00,F
00824:  BRA    0822
00826:  DECFSZ 01,F
00828:  BRA    0820
0082A:  MOVLW  2E
0082C:  MOVWF  00
0082E:  DECFSZ 00,F
00830:  BRA    082E
00832:  BRA    0834
00834:  DECFSZ FEF,F
00836:  BRA    081C
00838:  RETURN 0
.................... #fuses NOWDT NOBROWNOUT 
....................  
....................  
.................... #use rs232(baud=9600, xmit=PIN_E5, rcv=PIN_E4)//#use rs232(baud=9600, xmit=PIN_E5, rcv=PIN_E4) 
0083A:  BCF    F96.5
0083C:  BCF    F8D.5
0083E:  MOVLW  08
00840:  MOVWF  01
00842:  BRA    0844
00844:  NOP   
00846:  BSF    01.7
00848:  BRA    0866
0084A:  BCF    01.7
0084C:  RRCF   0A,F
0084E:  BTFSC  FD8.0
00850:  BSF    F8D.5
00852:  BTFSS  FD8.0
00854:  BCF    F8D.5
00856:  BSF    01.6
00858:  BRA    0866
0085A:  BCF    01.6
0085C:  DECFSZ 01,F
0085E:  BRA    084C
00860:  BRA    0862
00862:  NOP   
00864:  BSF    F8D.5
00866:  MOVLW  84
00868:  MOVWF  FE9
0086A:  DECFSZ FE9,F
0086C:  BRA    086A
0086E:  BRA    0870
00870:  NOP   
00872:  BTFSC  01.7
00874:  BRA    084A
00876:  BTFSC  01.6
00878:  BRA    085A
0087A:  RETURN 0
....................  
.................... #define PUSH_BUTTON PIN_B7 
....................  
.................... #include "bootloader.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                       BOOTLOADER.H                                //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example bootloader (ex_bootloader.c).                     //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  LOADER_END may need to be adjusted for a specific chip and       //// 
.................... ////  bootloader.  LOADER_END must be 1 minus a multiple of            //// 
.................... ////  FLASH_ERASE_SIZE.                                                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2014 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #ifndef __BOOTLOADER_H__ 
.................... #define __BOOTLOADER_H__ 
....................  
.................... #ifndef LOADER_END 
....................  #if defined(__PCM__) 
....................   #ifdef BOOTLOADER_MODE2X 
....................    #define LOADER_END 0x4BF 
....................   #else 
....................    #define LOADER_END 0x33F 
....................   #endif 
....................  #elif defined(__PCH__) 
....................   #define FLASH_SIZE getenv("FLASH_ERASE_SIZE") 
....................   #if ((0x700 % FLASH_SIZE) == 0)         //IF 0x500 is even flash boundary 
....................    #define LOADER_END   0x6FF 
....................   #else                                  //ELSE, goto next even boundary 
....................    #define LOADER_END   ((0x700+FLASH_SIZE-(0x700 % FLASH_SIZE))-1) 
....................   #endif 
....................  #else 
....................   #error Bootloader only works with PCM or PCH compiler 
....................  #endif 
.................... #endif 
....................  
.................... #define LOADER_SIZE   LOADER_END 
....................  
.................... #ifndef BOOTLOADER_AT_START 
....................  #define BOOTLOADER_AT_START 
.................... #endif 
....................  
.................... #ifndef _bootloader 
....................  #if defined(__PCM__) 
....................   #build(reset=LOADER_END+1, interrupt=LOADER_END+5) 
....................  #elif defined(__PCH__) 
....................   #build(reset=LOADER_END+1, interrupt=LOADER_END+9) 
....................  #endif 
....................  
....................  #org 0, LOADER_END {} 
.................... #else 
....................  #ifdef __PCM__ 
....................   #if getenv("PROGRAM_MEMORY") <= 0x800 
....................    #org LOADER_END+3, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #else 
....................    #org LOADER_END+3, 0x7FF {} 
....................    #if getenv("PROGRAM_MEMORY") <= 0x1000 
....................     #org 0x800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................    #else 
....................     #org 0x800, 0xFFF{} 
....................     #if getenv("PROGRAM_MEMORY") <= 0x1800 
....................      #org 0x1000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................     #else 
....................      #org 0x1000, 0x17FF {} 
....................      #if getenv("PROGRAM_MEMORY") <= 0x2000 
....................       #org 0x1800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................      #else 
....................       #org 0x1800, 0x1FFF {} 
....................       #if getenv("PROGRAM_MEMORY") <= 0x2800 
....................        #org 0x2000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................       #else 
....................        #org 0x2000, 0x27FF {} 
....................        #if getenv("PROGRAM_MEMORY") <= 0x3000 
....................         #org 0x2800, (getenv("PROGRAM_MEMORY") - 1) {} 
....................        #else 
....................         #org 0x2800, 0x2FFF {} 
....................         #if getenv("PROGRAM_MEMORY") <= 0x3800 
....................          #org 0x3000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................         #else 
....................          #org 0x3000, 0x37FF {} 
....................          #org 0x3800, 0x3FFF {} 
....................         #endif 
....................        #endif 
....................       #endif 
....................      #endif 
....................     #endif 
....................    #endif 
....................   #endif 
....................  #else 
....................   #if getenv("PROGRAM_MEMORY") <= 0x10000 
....................    #org LOADER_END+5, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #else 
....................    #org LOADER_END+5, 0xFFFE {} 
....................    #org 0x10000, (getenv("PROGRAM_MEMORY") - 1) {} 
....................   #endif 
....................  #endif 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
00934:  CLRF   FF8
00936:  BCF    FD0.7
00938:  MOVLB  E
0093A:  MOVLW  55
0093C:  MOVWF  F7E
0093E:  MOVLW  AA
00940:  MOVWF  F7E
00942:  BCF    F66.6
00944:  MOVLW  55
00946:  MOVWF  F7E
00948:  MOVLW  AA
0094A:  MOVWF  F7E
0094C:  BSF    F66.6
0094E:  CLRF   F9B
00950:  CLRF   F64
00952:  CLRF   F65
00954:  CLRF   F66
00956:  MOVLW  02
00958:  MOVWF  FD3
0095A:  BCF    F96.5
0095C:  BSF    F8D.5
0095E:  CLRF   xD9
00960:  CLRF   xDA
00962:  CLRF   x45
00964:  CLRF   x46
00966:  CLRF   x47
00968:  BCF    x8D.7
0096A:  BCF    x8D.6
0096C:  BCF    x8D.5
0096E:  MOVLB  1
00970:  CLRF   x88
00972:  MOVLB  F
00974:  CLRF   x53
00976:  CLRF   x38
00978:  CLRF   x37
.................... { 
....................    INT8 i; 
....................    delay_ms (100) ; 
0097A:  MOVLW  64
0097C:  MOVWF  06
0097E:  MOVLB  0
00980:  RCALL  0812
....................     
....................    WHILE (TRUE) 
....................    { 
....................       printf ("\r\nv4 %3u ", ++i); 
00982:  INCF   05,F
00984:  MOVLW  08
00986:  MOVWF  FF6
00988:  MOVLW  08
0098A:  MOVWF  FF7
0098C:  MOVLW  00
0098E:  MOVWF  FF8
00990:  MOVLW  05
00992:  MOVWF  06
00994:  BRA    087C
00996:  MOVFF  05,06
0099A:  MOVLW  13
0099C:  MOVWF  07
0099E:  BRA    08CC
009A0:  MOVLW  20
009A2:  MOVWF  0A
009A4:  RCALL  083A
....................       //TODO: User Code 
....................       // Enter Bootloader if Pin D0 is low after a RESET 
....................       if(!input(PUSH_BUTTON)) 
009A6:  BSF    F93.7
009A8:  BTFSC  F81.7
009AA:  BRA    09AE
....................       { 
....................          //load_program(); 
....................          reset_cpu(); //Since I can't call load_program() withough loader.c 
009AC:  RESET
....................          //loader.c not to be included in apps 
....................       } 
....................       delay_ms (100) ; 
009AE:  MOVLW  64
009B0:  MOVWF  06
009B2:  RCALL  0812
009B4:  BRA    0982
....................    } 
.................... } 
009B6:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FFA2   PR SOSC_DIG CLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT DSWDTOSC_INT
